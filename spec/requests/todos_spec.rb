require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/todos", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Todo. As you add validations to Todo, be sure to
  # adjust the attributes here as well.
  before(:example) do 
    cont = ApplicationController.new
      Todo.delete_all
      User.delete_all
    Rails.application.load_seed
    @id = User.first.id
    @todo_id = User.find(@id).todos.first.id 
    @token = cont.encode_token({user_id: @id})
    @valid_headers = {:Authorization => "Bearer #{@token}"}
    @id2 = User.second.id
    @todo_id2 = User.find(@id2).todos.first.id 
    @token2 = cont.encode_token({user_id: @id2})
    @valid_headers2 = {:Authorization => "Bearer #{@token2}"}
  end
  after(:example) do
    Todo.delete_all
    User.delete_all
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TodosController, or in your router and rack
  # middleware. Be sure to keep this updated too.


  describe "GET /index" do
    it "renders a successful response" do
      cont = ApplicationController.new
      user = User.new(:username => "othman", :password => "123456789", :id => 1)
      allow(User).to receive(:find_by).with({:id => 1}).and_return(user)
      token = cont.encode_token({user_id: user.id})
      headers = {:Authorization => "Bearer #{token}"}
      item1 = Todo.new({:user_id =>1, :description =>"item1" })
      item2 = Todo.new({:user_id =>1, :description =>"item2" })
      items = [item1, item2]
      allow(Todo).to receive(:where).with({:user_id => user.id}).and_return(items)
      get todos_url, headers: headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      cont = ApplicationController.new
      user = User.new(:username => "othman", :password => "123456789", :id => 1)
      allow(User).to receive(:find_by).with({:id => 1}).and_return(user)
      token = cont.encode_token({user_id: user.id})
      headers = {:Authorization => "Bearer #{token}"}
      item1 = Todo.new({:user_id =>1, :description =>"item1" ,:id => 1})
      allow(Todo).to receive(:find).with("1").and_return(item1)
      get "/todos/1", headers: headers, as: :json
      expect(response).to be_successful
    end
    it "it does not render item of another user" do
      cont = ApplicationController.new
      user = User.new(:username => "othman", :password => "123456789", :id => 2)
      allow(User).to receive(:find_by).with({:id => 2}).and_return(user)
      token = cont.encode_token({user_id: user.id})
      headers = {:Authorization => "Bearer #{token}"}
      item1 = Todo.new({:user_id =>1, :description =>"item1" ,:id => 1})
      allow(Todo).to receive(:find).with("1").and_return(item1)
      get "/todos/1", headers: headers, as: :json
      expect(response).to have_http_status(:unauthorized)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Todo" do
        cont = ApplicationController.new
        user = User.new(:username => "othman", :password => "123456789", :id => 1)
        allow(User).to receive(:find_by).with({:id => 1}).and_return(user)
        token = cont.encode_token({user_id: user.id})
        todo = Todo.new(:description => "first", :user_id => 1, :completed => true)
        allow(Todo).to receive(:new).and_return(todo)
        allow(todo).to receive(:save).and_return(true)
        allow(Todo).to receive(:count).and_return(0,1)
        expect {
          post "/todos",
               params: {}, headers: {:description => "first", :completed => true ,:Authorization => "Bearer #{token}"}, as: :json
        }.to change(Todo, :count).by(1)
      end
    end

    context "with no auth" do
      it "does not create a new Todo if no auth" do
        cont = ApplicationController.new
        user = User.new(:username => "othman", :password => "123456789", :id => 2)
        allow(User).to receive(:find_by).with({:id => 1}).and_return({})
        token = cont.encode_token({user_id: 1})
        todo = Todo.new(:description => "first", :user_id => 1, :completed => true)
        allow(Todo).to receive(:new).and_return({})
        allow(todo).to receive(:save).and_return(false)
        allow(Todo).to receive(:count).and_return(0,0)
        expect {
          post todos_url,
          params: {}, headers: {:description => "first", :completed => true}, as: :json
        }.to change(Todo, :count).by(0)
      end

      it "renders a JSON response with errors for the new todo" do
        cont = ApplicationController.new
        user = User.new(:username => "othman", :password => "123456789", :id => 2)
        allow(User).to receive(:find_by).with({:id => 1}).and_return({})
        token = cont.encode_token({user_id: 1})
        todo = Todo.new(:description => "first", :user_id => 1, :completed => true)
        allow(Todo).to receive(:new).and_return({})
        allow(todo).to receive(:save).and_return(false)
        post todos_url,
        params: {}, headers: {:description => "first", :completed => true}, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
    context "It does not save bad request"
    it "does not create a new Todo" do
      cont = ApplicationController.new
      user = User.new(:username => "othman", :password => "123456789", :id => 1)
      allow(User).to receive(:find_by).with({:id => 1}).and_return(user)
      token = cont.encode_token({user_id: user.id})
      todo = Todo.new(:user_id => 1, :completed => true)
      allow(Todo).to receive(:new).and_return(todo)
      allow(todo).to receive(:save).and_return(false)
      allow(Todo).to receive(:count).and_return(0,0)
      expect {
        post todos_url,
        params: {}, headers: { :completed => true ,:Authorization => "Bearer #{token}"}, as: :json
      }.to change(Todo, :count).by(0)
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do


      it "updates the requested todo" do
        cont = ApplicationController.new
        user = User.new(:username => "othman", :password => "123456789", :id => 1)
        allow(User).to receive(:find_by).with({:id => 1}).and_return(user)
        token = cont.encode_token({user_id: user.id})
        headers = {:Authorization => "Bearer #{token}"}
        todo = Todo.new({:user_id =>1, :description =>"first" ,:id => 1})
        allow(Todo).to receive(:find).with("1").and_return(todo)
        allow(todo).to receive(:update).and_return(true)
        patch "/todos/1", params: {}, headers: {:description => "first", :completed => true ,:Authorization => "Bearer #{token}"}, as: :json

        expect(Todo.find("1")[:description]).to eq("first")
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the todo unautharized" do

        patch "/todos/#{@todo_id}",
        params: {}, headers: {:description => "first", :completed => true ,:Authorization => "Bearer #{@token2}"} , as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
      it "renders a JSON response with errors for the unvalid parameters" do
        patch "/todos/#{@todo_id}",
        params: {}, headers: {:completed => true ,:Authorization => "Bearer #{@token}"} , as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested todo" do
      expect {
        delete "/todos/#{@todo_id }", headers: @valid_headers, as: :json
      }.to change(Todo, :count).by(-1)
    end
    it "it does not destroys the to do if it is not yours" do
      expect {
        delete "/todos/#{@todo_id }", headers: {:Authorization => "Bearer #{@token2}"}, as: :json
      }.to change(Todo, :count).by(0)
    end
  end
end
